Round 1 button

do as server
	let curRec := this;
	let xTeams := Points.RoundAnalysis[round = 1];
	for loop1 in xTeams do
		let xTeamsRank := loop1.RankForm;
		let myCount := cnt(xTeams[RankForm < xTeamsRank]);
		loop1.(placed := myCount + 1)
	end;
	switch leagueName_calc do
	case "MLSJ":
		(
			let nextRndTeams := (Points.RoundAnalysis[round = 1 and placed < 5] order by -placed);
			for team in nextRndTeams do
				let newRA := (create TeamEventSumRoundAnalysis);
				newRA.(
					TeamEventSummary := team.TeamEventSummary;
					round := "JO";
					startOrder := index(nextRndTeams, team) + 1
				)
			end
		)
	case "GCL":
		(
			let nextRndTeams := (Points.RoundAnalysis[round = 1 and DNF_Form = 0] order by -placed);
			for team in nextRndTeams do
				let newRA := (create TeamEventSumRoundAnalysis);
				newRA.(
					TeamEventSummary := team.TeamEventSummary;
					round := 2;
					startOrder := index(nextRndTeams, team) + 1
				)
			end
		)
	case "LN":
		(
			let nextRndTeams := (Points[not DNC].RoundAnalysis[round = 1] order by -placed);
			for team in nextRndTeams do
				let newRA := (create TeamEventSumRoundAnalysis);
				newRA.(
					TeamEventSummary := team.TeamEventSummary;
					round := 2;
					startOrder := index(nextRndTeams, team) + 1
				)
			end
		)
	end
end

Qtr Placing button

do as server
	let curRec := this;
	let xTeams := Points.RoundAnalysis[round = "Q"];
	for loop1 in xTeams do
		let xTeamsRank := loop1.RankForm;
		let myCount := cnt(xTeams[RankForm < xTeamsRank]);
		loop1.(placed := myCount + 1)
	end;
	let nextRndTeams := (Points.RoundAnalysis[round = "Q" and placed < 9] order by -placed).TeamEventSummary;
	let topFourTeams := (Season.ActiveTeams.TeamEventSummary['Event Order' = curRec.'Event Order' - 1 and CurrentStanding < 5] order by -CurrentStanding).ActiveTeams.TeamEventSummary['Event Order' = curRec.'Event Order'];
	let semiTeams := array(nextRndTeams, topFourTeams);
	for team in semiTeams do
		let newRA := (create TeamEventSumRoundAnalysis);
		newRA.(
			TeamEventSummary := team;
			round := "S";
			startOrder := index(semiTeams, team) + 1
		)
	end
end

Semi Placing button

do as server
	let curRec := this;
	let xTeams := Points.RoundAnalysis[round = "S"];
	for loop1 in xTeams do
		let xTeamsRank := loop1.RankForm;
		let myCount := cnt(xTeams[RankForm < xTeamsRank]);
		loop1.(placed := myCount + 1)
	end;
	let nextRndTeams := (Points.RoundAnalysis[round = "S" and placed < 7] order by -placed).TeamEventSummary;
	for team in nextRndTeams do
		let newRA := (create TeamEventSumRoundAnalysis);
		newRA.(
			TeamEventSummary := team;
			round := "F1";
			startOrder := index(nextRndTeams, team) + 1
		)
	end
end

F1 Placing button

do as server
	let curRec := this;
	let xTeams := Points.RoundAnalysis[round = "F1"];
	for loop1 in xTeams do
		let xTeamsRank := loop1.RankForm;
		let myCount := cnt(xTeams[RankForm < xTeamsRank]);
		loop1.(placed := myCount + 1)
	end;
	let nextRndTeams := (Points.RoundAnalysis[round = "F1"] order by -placed).TeamEventSummary;
	for team in nextRndTeams do
		let newRA := (create TeamEventSumRoundAnalysis);
		newRA.(
			TeamEventSummary := team;
			round := "F2";
			startOrder := index(nextRndTeams, team) + 1
		)
	end
end

JO Placing button

do as server
	let curRec := this;
	let xTeams := Points.RoundAnalysis[round = "JO"];
	for loop1 in xTeams do
		let xTeamsRank := loop1.RankForm;
		let myCount := cnt(xTeams[RankForm < xTeamsRank]);
		loop1.(placed := myCount + 1)
	end;
	let nextRndTeams := (Points.RoundAnalysis[round = "JO"] order by -placed).TeamEventSummary;
	for team in nextRndTeams do
		let newRA := (create TeamEventSumRoundAnalysis);
		newRA.(
			TeamEventSummary := team;
			round := if team.RoundAnalysis[round = "JO"].placed > 2 then
					"3PO"
				else
					"1PO"
				end;
			startOrder := if even(first(team.RoundAnalysis[round = "JO"].placed)) then
					1
				else
					2
				end
		)
	end
end

Create JO button

do as server
	let xJOTeams := Points.RoundAnalysis[round = 1 and placed < 5].TeamEventSummary;
	for loop1 in xJOTeams do
		for loop2 in Results[TeamID = loop1.TeamID] do
			let JORec := duplicate(loop2);
			JORec.(
				'Round Type' := null;
				'Start Order' := null;
				Penalty := null;
				EnterTime := null;
				Time := null
			)
		end
	end
end

Create Line button

#{new Create Line button on Event table 2024/11/08}#;
let t := this;
let xselectedTeamRec := record(ActiveTeams,number(t.'Select a Team'));
let xTeamRec := xselectedTeamRec.TeamNames.Team;
let xTMRec := record('Team Membership',number(t.'Select a Rider'));
let riderResults := Results[TeamRiders = xTMRec];
let teamResults := Results[TeamID = xselectedTeamRec.TeamID];
let roundOneRecs := Points.RoundAnalysis[round = 1];
let selectedTeamRoundOneRec := first(Points[TeamID = xselectedTeamRec.TeamID].RoundAnalysis[round = 1]);
let roundOneStartOrder := if sum(roundOneRecs.startOrder) = 0 then
		1
	else
		last(sort(roundOneRecs.startOrder)) + 1
	end;
if selectedTeamRoundOneRec.startOrder = null then
	selectedTeamRoundOneRec.(startOrder := roundOneStartOrder)
end;
#{create RiderEventSummary record}#;
do as server
	let xRER := xTMRec.RiderEventSummary[TeamEventSummary.Location = t];
	if count(xRER) = 0 then
		let checkTeamSummaryAgain := Points[ActiveTeams = xselectedTeamRec];
		let createRiderSummary := (create RiderEventSummary);
		createRiderSummary.(
			'Team Membership' := xTMRec;
			TeamEventSummary := first(checkTeamSummaryAgain)
		)
	end
end;
#{create Result line}#;
let checkForExistingRec := switch leagueNum_calc do
	case 1:
		switch true do
		case length(riderResults) = 0:
			1
		case length(riderResults['Round Type' = 1]) > 0 or
		length(riderResults) = 0 and length(teamResults['Round Type' = 1]) = 2:
			2
		case length(riderResults['Round Type' = "F1"]) = 1:
			3
		case length(riderResults['Round Type' = "S"]) = 1:
			4
		case length(riderResults['Round Type' = "Q"]) = 1:
			5
		end
	default:
		if length(riderResults) = 0 or length(riderResults['Round Type' = 1]) = 1 then
			1
		end
	end;
if checkForExistingRec > 0 then
	let getTeamRoundAnalysis := (Points[TeamID = xTeamRec.TeamID].RoundAnalysis order by roundRank);
	let SO := (
			let xLastRound := first(getTeamRoundAnalysis);
			if length(teamResults['Round Type' = xLastRound.round]) < 1 then
				0
			else
				length(teamResults['Round Type' = xLastRound.round])
			end
		);
	let newResult := (create Results);
	newResult.(
		Location := t;
		TeamRiders := xTMRec;
		'Round Type' := first(getTeamRoundAnalysis.round);
		'Start Order' := SO + 1
	);
	popupRecord(newResult)
else
	alert("No new record needed.")
end

FIX 2ND ROUND START ORDER

do as server
	switch leagueName_calc do
	case "MLSJ":
		(
			let nextRndTeams := (Points.RoundAnalysis[round = 1 and placed < 5] order by -placed);
			for team in nextRndTeams do
				let nxtRnd := team.TeamEventSummary.RoundAnalysis[round = "JO"];
				nxtRnd.(startOrder := index(nextRndTeams, team) + 1)
			end
		)
	case "GCL":
		(
			let nextRndTeams := (Points.RoundAnalysis[round = 1 and DNF_Form = 0] order by -placed);
			for team in nextRndTeams do
				let nxtRnd := team.TeamEventSummary.RoundAnalysis[round = 2];
				nxtRnd.(startOrder := index(nextRndTeams, team) + 1)
			end
		)
	case "LN":
		(
			let nextRndTeams := (Points[not DNC].RoundAnalysis[round = 1] order by -placed);
			for team in nextRndTeams do
				let nxtRnd := team.TeamEventSummary.RoundAnalysis[round = 2];
				nxtRnd.(startOrder := index(nextRndTeams, team) + 1)
			end
		)
	end
end
