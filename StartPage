Latest Changes

Update Trigger after update to include:
Season := 0;

Add New Team button
let t := this;
let xLeague := record(Leagues,number(League));
let latestSeason := last(xLeague.Seasons order by year_calc);
let checkArray := [xLeague, latestSeason];
if count(checkArray) = 2 then
	let newTeamRec := (create Teams);
	newTeamRec.(League := xLeague);
	record(Teams,number(newTeamRec)).(LinkID := League.recID);
	let newTeamNameRec := (create TeamNames);
	newTeamNameRec.(
		Team := newTeamRec;
		Name := t.'Enter New Team Name'
	);
	record(TeamNames,number(newTeamNameRec)).(LinkID := Team.TeamID);
	let newSeasonActiveRec := (create ActiveTeams);
	newSeasonActiveRec.(
		Seasons := latestSeason;
		TeamNames := newTeamNameRec
	);
	record(ActiveTeams,number(newSeasonActiveRec)).(LinkID := "S:" + Seasons.recID + "," + "TN:" + TeamNames.recID);
	'Enter New Team Name' := null
else
	alert("Select a League")
end

//New Start Season fields
Choose a Site




OLD CHANGES
//New Fields:
Select a Result (dC)
Penalities (num)
Time (text)
Reason (choice) 
	ELM
	RET
	DNS
	DSQ
Course (dMC)
let xEvent := record(Events,number(Event));
let xResult := record(Results,number('Select a Result'));
let xRound := switch number(League) do
	case 2:
		if contains(["JO", "1PO", "3PO"], xResult.'Round Type') then
			"2"
		else
			"1"
		end
	default:
		xResult.'Round Type'
	end;
xEvent.Course[Round = xRound]

//Add Results button:
do as server
	let t := this;
	let xResult := record(Results,number('Select a Result'));
	let x := length(Time);
	let subxL := substring(Time), x - 2, x);
	let subxR := substring(Time), 0, x - 2);
	xResult.(
		Penalty := t.Penalties;
		Time := number(subxR + "." + subxL);
		Reason := number(t.Reason)
	);
	for rail in numbers(Course) do
		let newRec := (create penaltyAt);
		newRec.(
			Results := xResult;
			Obstacle := rail
		)
	end
end


//Update Trigger after updates to include:
'Choose a Rider' := null;
'Choose a New Rider' := 0;
'Select a Result' := 0;
Penalties := null;
Time := null;
Reason := 0;
Course := 0



Old Changes

//Same Teams Button
let t := this;
let xLeague := record(Leagues,number(League));
let allTeams := xLeague.Seasons[Year = year(today()) - 1].ActiveTeams;
let latestSeason := last(xLeague.Seasons order by year_calc);
if latestSeason.'Season Is?' != "Completed" then
	for team in allTeams do
		let newRec := (create ActiveTeams);
		newRec.(
			Seasons := latestSeason;
			TeamNames := team.TeamNames
		)
	end
else
	alert("Please create a new season.")
end

//New Season button

let t := this;
let xLeague := record(Leagues,number(League));
let latestSeasonRec := last(xLeague.Seasons order by Year);
let latestCompletedSeason := last(xLeague.Seasons['Season Is?' = "Completed"]);
if latestSeasonRec.'Season Is?' = "Completed" then
	let newRec := (create Seasons);
	newRec.(
		League := xLeague;
		Year := latestSeasonRec.Year + 1;
		'Stats Needed' := numbers(latestSeasonRec.'Stats Needed')
	)
else
	alert("Season already created.")
end
